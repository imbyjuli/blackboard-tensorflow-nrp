{"data":{"TF":[{"id":"move_target","name":"move_target","code":"# Imported Python Transfer Function\n#\nfrom gazebo_msgs.srv import SetModelState\nimport rospy\nrospy.wait_for_service(\"/gazebo/set_model_state\")\nservice_proxy = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState, persistent=True)\n@nrp.MapCSVRecorder(\"recorder\", filename=\"train_labels.csv\", headers=[\"name\", \"top_left\",\"top_right\",\"bottom_left\",\"bottom_right\"])\n@nrp.MapVariable(\"counter\", initial_value = 0)\n@nrp.MapVariable(\"top_right\", initial_value={'x': 0.5, 'y': 1.38, 'z': 1.5})\n@nrp.MapVariable(\"top_left\", initial_value={'x': -0.5, 'y': 1.38, 'z': 1.5})\n@nrp.MapVariable(\"bottom_right\", initial_value={'x': 0.5, 'y': 1.38, 'z': 1.0})\n@nrp.MapVariable(\"bottom_left\", initial_value={'x': -0.5, 'y': 1.38, 'z': 1.0})\n@nrp.MapVariable(\"last_positions\", initial_value = [0,1,2,3] )\n@nrp.MapVariable(\"last_color\",     initial_value = [0,0,0,0] ) \n@nrp.MapVariable(\"last_t\",     initial_value = 0.0 ) \n@nrp.MapVariable(\"dropout\",     initial_value = [True,True,True,True] ) \n@nrp.MapVariable(\"set_model_state_srv\", initial_value=service_proxy)\n@nrp.MapVariable(\"phase\", initial_value = None)\n@nrp.MapVariable(\"bridge\", initial_value = None)\n@nrp.MapRobotSubscriber(\"camera\", Topic('/icub_model/left_eye_camera/image_raw', sensor_msgs.msg.Image))\n@nrp.Robot2Neuron() # dummy R2N\ndef move_target(t, recorder, counter, top_right , top_left , bottom_right , bottom_left , last_positions, last_color, last_t, dropout, camera, bridge, phase, set_model_state_srv):\n    import random \n    from PIL import Image\n    dropout_probability = 0.25 \n    forms = [\"Circle\",\"Diamond\",\"Square\",\"Triangle\"]\n    colors = [\"Green\",\"Red\",\"Blue\",\"White\"] \n    top_right = top_right.value\n    top_left = top_left.value\n    bottom_right = bottom_right.value\n    bottom_left = bottom_left.value\n    positions = [top_left,top_right, bottom_left,bottom_right]\n    #setting orientation since game \n    form_orientation_dict = {\n    \"Triangle\": {\"x\":0.70710678118, \"y\":0, \"z\":0, \"w\":0.70710678118},\n    \"Circle\" :  {\"x\":0.70710678118, \"y\":0, \"z\":0, \"w\":0.70710678118},\n    \"Square\" :  {\"x\":0, \"y\":0, \"z\":0, \"w\":0}, \n    \"Diamond\":  {\"x\": 0, \"y\":0.38268343236, \"z\":0, \"w\":0.9}\n    }\n    form_c_dict = {\n    \"Triangle\": {},\n    \"Circle\" :  {},\n    \"Square\" :  {}, \n    \"Diamond\":  {}\n    }   \n    for form in forms: \n        orientation = form_orientation_dict[form]\n        for color in colors: \n            form_c_dict[form][color] = gazebo_msgs.msg.ModelState()\n            form_c_dict[form][color].model_name = form + \"_\" + color\n            form_c_dict[form][color].scale.x = form_c_dict[form][color].scale.y = form_c_dict[form][color].scale.z = 1.0\n            # reference frame\n            form_c_dict[form][color].reference_frame = 'world'\n            #orientation\n            form_c_dict[form][color].pose.orientation.x = orientation[\"x\"]\n            form_c_dict[form][color].pose.orientation.y = orientation[\"y\"]\n            form_c_dict[form][color].pose.orientation.z = orientation[\"z\"]\n            form_c_dict[form][color].pose.orientation.w = orientation[\"w\"]\n            #set default pose\n            form_c_dict[form][color].pose.position.x = 0\n            form_c_dict[form][color].pose.position.y = 4\n            form_c_dict[form][color].pose.position.z = 0\n    if(t > 10 and phase.value is None):\n        phase.value = \"SET\"\n#save data: \n    if (phase.value == \"CAPTURE\" and t > last_t.value +2.): \n        from cv_bridge import CvBridge, CvBridgeError\n        bridge.value = CvBridge()\n    # no image received yet, do nothing\n        if camera.value is None:\n          return\n    # convert the ROS image to an OpenCV image and Numpy array\n        #cv_image = bridge.value.imgmsg_to_cv2(camera.value, \"rgb8\")\n        #img = Image.fromarray(cv_image, 'RGB')\n        #filename = '/tmp/test/my' + str(counter.value) + '.png'\n        #img.save(filename)  \n        counter.value = counter.value + 1\n        last_c = last_color.value\n        p = last_positions.value \n        f = [\"Circle\",\"Diamond\",\"Square\",\"Triangle\"]\n        f = [f[i] if dropout.value[i] else \"-\" for i in range(4)]\n        sorted_forms = [f[p.index(i)] for i in range(4)]\n        recorder.record_entry(\n            filename,\n            sorted_forms[0],\n            sorted_forms[1],\n            sorted_forms[2],\n            sorted_forms[3]\n            )\n        phase.value = \"SET\"\n        last_t.value = t \n\n\n    elif(phase.value == \"SET\" and t > last_t.value +2.): \n        random.shuffle(last_positions.value) \n        last_c =  random.sample(range(4),3) \n        last_color.value = last_c\n        dropout.value = [(random.random() > dropout_probability) for i in range(4)]\n        phase.value = \"CAPTURE\"\n        last_t.value = t \n    else: \n        last_c = last_color.value\n    #this has to be re-done\n    for i in range(4): \n        if dropout.value[i]:\n            chosen_color =  colors [last_c[i]]\n            position = positions [ last_positions.value[i]]\n            chosen_form = forms[i]\n            form_c_dict[chosen_form][chosen_color].pose.position.x = position[\"x\"]\n            form_c_dict[chosen_form][chosen_color].pose.position.y = position[\"y\"]\n            form_c_dict[chosen_form][chosen_color].pose.position.z = position[\"z\"]\n    #call service\n    for form in forms: \n        for color in colors: \n            response = set_model_state_srv.value(form_c_dict[form][color])\n          #check response        \n            if not response.success: \n                clientLogger.info(response.status_message)\n#\n","dirty":false,"local":false,"error":{"Runtime":{"lineText":"","functionName":"move_target","errorType":"Runtime","offset":-1,"fileName":"","sourceType":"Transfer Function","lineNumber":106,"message":"list index out of range","severity":1,"lineHandle":105}},"regex":"^\\b(?!\\btf_results\\b|\\bcsv_spike_monitor\\b|\\ball_neurons_monitor\\b)([A-z_]+[\\w_]*)$","buttonTextTF":"Enabled","enabledApplyButton":true,"editorsOptions":{"lineWrapping":true,"lineNumbers":true,"readOnly":false,"indentUnit":4,"mode":"text/x-python"}},{"id":"tf_results","name":"tf_results","code":"# Imported Python Transfer Function\nfrom std_msgs.msg import Float64\n@nrp.MapVariable(\"eye_position\", scope=nrp.GLOBAL)\n@nrp.MapSpikeSink(\"result_0_dv\", nrp.brain.actors[1], nrp.leaky_integrator_alpha)\n@nrp.MapSpikeSink(\"result_1_dv\", nrp.brain.actors[2], nrp.leaky_integrator_alpha)\n@nrp.Neuron2Robot(Topic('/robot/eye_version/pos', Float64))\ndef tf_results(t, eye_position, result_0_dv, result_1_dv):\n    def deg2rad(deg):\n        \"\"\"\n        Degrees to radians conversion function.\n        :param deg: value in degrees\n        :return: value of deg in radians\n        \"\"\"\n        return (float(deg) / 360.) * (2. * np.pi)\n    if eye_position.value is None:\n        return 0.0\n    d = result_1_dv.voltage - result_0_dv.voltage\n    max_mov = 1.0\n    ret = eye_position.value + deg2rad(-((d + 0.03) / 0.09 * 2 * max_mov - max_mov))\n    return ret\n##\n","dirty":false,"local":false,"error":{},"regex":"^\\b(?!\\bmove_target\\b|\\bcsv_spike_monitor\\b|\\ball_neurons_monitor\\b)([A-z_]+[\\w_]*)$","buttonTextTF":"Enabled","enabledApplyButton":true,"editorsOptions":{"lineWrapping":true,"lineNumbers":true,"readOnly":false,"indentUnit":4,"mode":"text/x-python"}},{"id":"csv_spike_monitor","name":"csv_spike_monitor","code":"# Imported Python Transfer Function\n@nrp.MapCSVRecorder(\"recorder\", filename=\"all_spikes.csv\", headers=[\"id\", \"time\"])\n@nrp.MapSpikeSink(\"record_neurons\", nrp.brain.record, nrp.spike_recorder)\n@nrp.Neuron2Robot(Topic('/monitor/spike_recorder', cle_ros_msgs.msg.SpikeEvent))\ndef csv_spike_monitor(t, recorder, record_neurons):\n    for i in range(0, len(record_neurons.times)):\n        recorder.record_entry(\n            record_neurons.times[i][0],\n            record_neurons.times[i][1]\n        )\n","dirty":false,"local":false,"error":{},"regex":"^\\b(?!\\bmove_target\\b|\\btf_results\\b|\\ball_neurons_monitor\\b)([A-z_]+[\\w_]*)$","buttonTextTF":"Enabled","enabledApplyButton":true,"editorsOptions":{"lineWrapping":true,"lineNumbers":true,"readOnly":false,"indentUnit":4,"mode":"text/x-python"}},{"id":"all_neurons_monitor","name":"all_neurons_monitor","code":"# Imported Python Transfer Function\n@nrp.NeuronMonitor(nrp.brain.record, nrp.spike_recorder)\ndef all_neurons_monitor(t):\n    return True\n##\n","dirty":false,"local":false,"error":{},"regex":"^\\b(?!\\bmove_target\\b|\\btf_results\\b|\\bcsv_spike_monitor\\b)([A-z_]+[\\w_]*)$","buttonTextTF":"Enabled","enabledApplyButton":true,"editorsOptions":{"lineWrapping":true,"lineNumbers":true,"readOnly":false,"indentUnit":4,"mode":"text/x-python"}}]},"__owner_id":"default-owner"}